package br.edu.unitri.projectmanager;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import org.junit.Before;
import org.junit.Test;

import br.edu.unitri.projectmanager.dao.DepartamentoDAO;
import br.edu.unitri.projectmanager.dao.EmpregadoDAO;
import br.edu.unitri.projectmanager.domain.Departamento;
import br.edu.unitri.projectmanager.domain.Dependente;
import br.edu.unitri.projectmanager.domain.Empregado;

public class EmpregadoTest {
	EmpregadoDAO empregadoDAO = null;
	DepartamentoDAO departamentoDAO = null;

	@Before
	public void init() {
		empregadoDAO = new EmpregadoDAO();
		departamentoDAO = new DepartamentoDAO();
	}

	@Test
	public void adicionaEmpregadoEmpregados() {
		Departamento departamento = departamentoDAO
				.consultaDepartamentoPorId(1l);
		EmpregadoDAO empregadoDAO = new EmpregadoDAO();
		Empregado d1 = new Empregado("Comercial", departamento);
		Empregado d2 = new Empregado("Fincanceiro", departamento);
		empregadoDAO.insereEmpregado(d1);
		empregadoDAO.insereEmpregado(d2);
	}

	@Test
	public void listaEmpregados() {
		List<Empregado> empregados = empregadoDAO.consultaEmpregado();
		for (Empregado empregado : empregados) {
			System.out.println("Avaria Name Inseridos: " + empregado.getNome()
					+ " = " + "cpf: " + empregado.getNome());
		}
	}
	
	@Test //Exercicio A - Sem Criteria
	public void listaTodasAsInformacoesDosEmpregados() {
		List<Empregado> empregados = empregadoDAO.consultaEmpregado();
		for (Empregado empregado : empregados) {
			System.out.println("Name: " 
					+ empregado.getNome()
					+ "<br /> = " + "cpf: " 
					+ empregado.getNome());
					+ "<br /> = " + "cpf: " 
			
			private String nome;

			private String endereco;

			private String sexo;

			@Column(name = "data_nascimento")
			private Date dataNascimento;

			@Column(name = "codigo_gerente")
			private int codigoGerente;

			@ManyToOne
			private Departamento departamento;

			@OneToMany(mappedBy = "empregado", cascade = CascadeType.PERSIST)
			private List<Dependente> dependentes = new ArrayList<Dependente>();
		}
	}

}