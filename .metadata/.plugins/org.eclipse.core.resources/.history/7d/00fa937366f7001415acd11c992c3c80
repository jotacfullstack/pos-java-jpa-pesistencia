package br.edu.unitri.aula06livro.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Query;
import javax.persistence.Tuple;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.persistence.criteria.Subquery;

import br.edu.unitri.aula06livro.domain.Livro;
import br.edu.unitri.aula06livro.util.JPAUtil;

public class LivroDAO {
	EntityManager manager = null;

	public LivroDAO() {
		manager = new JPAUtil().getEntityManager();

	}

	public void insereLivro(Livro Livro) {
		EntityTransaction tx = manager.getTransaction();
		tx.begin();
		manager.persist(Livro);
		tx.commit();
	}

	public List<Livro> consultaLivroByJpaQl() {
		TypedQuery<Livro> query = manager.createQuery("Select f from Livro f",
				Livro.class);
		return query.getResultList();
	}

	public List<Livro> consultaLivroByCriteria() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Livro> cq = cb.createQuery(Livro.class);
		return manager.createQuery(cq).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Livro> consultaLivroBySQLNativo() {
		Query q = manager.createNativeQuery("Select * from tb_produto",
				Livro.class);
		return q.getResultList();
	}

	public Livro testeSubqueries() {
		/*
		 * CriteriaBuilder cb = manager.getCriteriaBuilder();
		 * 
		 * CriteriaQuery<Double> query = cb.createQuery(Double.class);
		 * Root<Livro> livro = query.from(Livro.class);
		 * query.select(root.<Double>get("preco")));
		 * 
		 * cb.isMmanagerber(livro, livro.<Editora> get(" editora ")
		 * .<Collection<Livro>> get(" maisVendidos "));
		 */

		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Livro> c = cb.createQuery(Livro.class);
		Root<Livro> livro1 = c.from(Livro.class);
		c.select(livro1);
		Subquery<Livro> subquery = c.subquery(Livro.class);
		Root<Livro> livro2 = subquery.from(Livro.class);
		subquery.select(livro2);
		Predicate predicate = cb.greaterThan(livro2.<Double> get("preco"),
				livro1.<Double> get("preco"));
		subquery.where(predicate);
		Predicate predicate2 = cb.not(cb.exists(subquery));
		c.where(predicate2);
		TypedQuery<Livro> tyQuery = manager.createQuery(c);

		return tyQuery.getSingleResult();
	}

	public void selectWhere() {
		CriteriaBuilder builder = manager.getCriteriaBuilder();

		CriteriaQuery<Double> query = builder.createQuery(Double.class);
		Root<Livro> root = query.from(Livro.class);
		query.select(builder.avg(root.<Double> get("preco")));

		Predicate predicate = builder.ge(root.<Double> get("id"), 3);
		query.where(predicate);

		Double precoMedioFilt = manager.createQuery(query).getSingleResult();
		Systmanager.out.printf("Pre�o M�dio: %.2f\n", precoMedioFilt);

	}

	public void selectComTupla() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Tuple> queryMS = cb.createQuery(Tuple.class);
		Root<Livro> rootLivro = queryMS.from(Livro.class);
		queryMS.multiselect(rootLivro.get("nome").alias("nomeT"), rootLivro
				.get("preco").alias("precoT"));
		List<Tuple> resultado = manager.createQuery(queryMS).getResultList();
		for (Tuple tuple : resultado) {
			Systmanager.out.println(tuple.get("nomeT") + " "
					+ tuple.get("precoT"));
		}

	}

	public void getSomaPrecos() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Double> cq = cb.createQuery(Double.class);
		Root<Livro> root = cq.from(Livro.class);
		cq.select(cb.sum(root.<Double> get("preco")));

		Double total = manager.createQuery(cq).getSingleResult();
		Systmanager.out.printf("%.2f", total);

	}

	public Double getPrecoMedio() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Double> cq = cb.createQuery(Double.class);
		Root<Livro> root = cq.from(Livro.class);
		cq.select(cb.avg(root.<Double> get("preco")));

		return manager.createQuery(cq).getSingleResult();
	}

	public List<Object[]> selectAllNomesPrecosLivros() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Object[]> cq = cb.createQuery(Object[].class);

		Root<Livro> root = cq.from(Livro.class);
		cq.multiselect(root.<String> get("nome"), root.<Double> get("preco"));

		TypedQuery<Object[]> query = manager.createQuery(cq);
		return query.getResultList();

	}

	public List<String> selectAllNomesLivros() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<String> cq = cb.createQuery(String.class);

		Root<Livro> root = cq.from(Livro.class);
		cq.select(root.<String> get("nome"));

		TypedQuery<String> query = manager.createQuery(cq);
		return query.getResultList();
	}

	public List<Livro> selectAllLivros() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Livro> cq = cb.createQuery(Livro.class);

		Root<Livro> root = cq.from(Livro.class);
		cq.select(root);

		TypedQuery<Livro> query = manager.createQuery(cq);
		return query.getResultList();
	}
}
