package br.edu.unitri.aula05fornecedor.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;

import br.edu.unitri.aula05fornecedor.domain.Fornecedor;
import br.edu.unitri.aula05fornecedor.util.JPAUtil;

public class FornecedorDAO {
	EntityManager manager = null;

	public FornecedorDAO() {
		manager = new JPAUtil().getEntityManager();

	}

	public void insereFornecedor(Fornecedor fornecedor) {
		EntityTransaction tx = manager.getTransaction();
		tx.begin();
		manager.persist(fornecedor);
		tx.commit();
	}

	public Fornecedor findById(Integer id) {
		return manager.find(Fornecedor.class, id);
	}

	public List<Fornecedor> consultaFornedorByJpaQl() {
		TypedQuery<Fornecedor> query = manager.createQuery(
				"Select f from Fornecedor f", Fornecedor.class);
		return query.getResultList();
	}

	public List<Fornecedor> consultaFornedorByCriteria() {
		CriteriaBuilder cb = manager.getCriteriaBuilder();
		CriteriaQuery<Fornecedor> cq = cb.createQuery(Fornecedor.class);
		return manager.createQuery(cq).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Fornecedor> consultaFornedorBySQLNativo() {
		Query q = manager.createNativeQuery("Select * from tbFornecedor",
				Fornecedor.class);
		return q.getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Fornecedor> consultaJpaQl_Par(Integer codigo) {
		Query q = manager.createQuery(
				"Select f from Fornecedor f where f.codigo = :codigo",
				Fornecedor.class);
		return q.setParameter("codigo", codigo).getResultList();
	}

	@SuppressWarnings("unchecked")
	public List<Fornecedor> consultaSQL_Par(Integer codigo) {
		Query q = manager
				.createNativeQuery(
						"Select * from tbFornecedor where CODFRN = ?",
						Fornecedor.class);
		return q.setParameter(1, codigo).getResultList();
	}

	public Integer listagem() {
		TypedQuery<Integer> q = manager.createQuery(
				"select max(f.codigo) from Fornecedor f", Integer.class);
		return (Integer) q.getSingleResult();
	}

	public List<Fornecedor> problMaisUm() {
		TypedQuery<Fornecedor> query = manager.createQuery(
				"Select f from Fornecedor f", Fornecedor.class);
		return query.getResultList();
	}

	private List<Fornecedor> problMaisUmResolvido(EntityManager em) {
		// SELECT DISTINCT (d) FROM Departamento d LEFT JOIN FETCH d.
		// funcionarios
		TypedQuery<Fornecedor> query = em
				.createQuery(
						"Select distinct(f) from Fornecedor f left join fetch f.produtos",
						Fornecedor.class);
		 fornecedors = query.getResultList();
		for (Fornecedor forn : fornecedors) {
			System.out.println("fornecedor: " + forn.getNome());
			for (Produto produto : forn.getProdutos()) {
			}
		}
		System.out.println(produto);
	}
}
