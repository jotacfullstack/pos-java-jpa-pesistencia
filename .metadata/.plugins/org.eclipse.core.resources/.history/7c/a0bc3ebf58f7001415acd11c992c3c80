package br.edu.unitri.aula04pessoa;

import java.util.List;

import javax.persistence.Query;
import javax.persistence.TypedQuery;

import org.junit.Before;
import org.junit.Test;

import br.edu.unitri.aula05fornecedor.dao.FornecedorDAO;
import br.edu.unitri.aula05fornecedor.domain.Fornecedor;

public class GerenciarFornecedoresTest {
	FornecedorDAO fornecedorDAO = null;

	@Before
	public void init() {
		fornecedorDAO = new FornecedorDAO();
	}

	@Test
	public void findFornecedorByJpaQl() {
		List<Fornecedor> fornecedores = fornecedorDAO
				.consultaFornedorByCriteria();
		for (Fornecedor fornecedor : fornecedores) {
			System.out.println("Forncedor nome: " + fornecedor.getNome());
		}
	}

	@Test
	public void findFornecedorByCriteria() {
		List<Fornecedor> fornecedores = fornecedorDAO
				.consultaFornedorByCriteria();
		for (Fornecedor fornecedor : fornecedores) {
			System.out.println("Forncedor nome: " + fornecedor.getNome());
		}
	}

	@Test
	public void findFornecedorBySQLNativo() {
		List<Fornecedor> fornecedores = fornecedorDAO
				.consultaFornedorBySQLNativo();
		for (Fornecedor fornecedor : fornecedores) {
			System.out.println("Forncedor nome: " + fornecedor.getNome());
		}
	}

	@Test
	public void findJpaQl_Par() {
		List<Fornecedor> fornecedores = fornecedorDAO.consultaJpaQl_Par(1);
		for (Fornecedor fornecedor : fornecedores) {
			System.out.println("Forncedor nome: " + fornecedor.getNome());
		}
	}

	@Test
	public void findSQl_Par() {
		List<Fornecedor> fornecedores = fornecedorDAO.consultaSQL_Par(1);
		for (Fornecedor fornecedor : fornecedores) {
			System.out.println("Forncedor nome: " + fornecedor.getNome());
		}
	}

	@Test
	public void findListagem() {
		List<Fornecedor> fornecedores = fornecedorDAO.listagem();
		for (Fornecedor fornecedor : fornecedores) {
			System.out.println("Forncedor nome: " + fornecedor.getNome());
		}
	}

	public Integer () {
		TypedQuery<Integer> q = manager.createQuery(
				"select max(f.codigo) from Fornecedor f", Integer.class);
		return (Integer) q.getSingleResult();
	}

	public List<Fornecedor> problMaisUm() {
		TypedQuery<Fornecedor> query = manager.createQuery(
				"Select f from Fornecedor f", Fornecedor.class);
		return query.getResultList();
	}

	public List<Fornecedor> problMaisUmResolvido() {
		// SELECT DISTINCT (d) FROM Departamento d LEFT JOIN FETCH d.
		// funcionarios
		TypedQuery<Fornecedor> query = manager
				.createQuery(
						"Select distinct(f) from Fornecedor f left join fetch f.produtos",
						Fornecedor.class);
		return query.getResultList();

	}
}